# Spring Security Core Beginner-to Guru

### Application Security

- Spring Security provides: 
  - Protection from common security exploits 
  - Integration with external security products, such as LDAP 
  - Provides utilities for password encoding

#### Terminology
- PII - Personally Identifiable Information - name, address, email, tax ids, etc
- Encryption at Rest - Sensitive data needs to be encrypted when stored (database, filesystem, backup tapes, etc)
- Encryption in Flight - When transmitted, sensitive data needs to be encrypted - can be protocol (https, ssh, etc)
- Segregation of Duties - Avoid having powerful super users in organization
- Processes and Controls - Be able to document compliance (source control, issue management)

#### Key Terms

- Identity - A unique actor, typically an individual aka user
- Credentials - Usually a user id and password
- Authentication - Is how the application verifies the identity of the requestor
  - Spring Security has a variety of methods for Authentication
  - Typically the user provides credentials, which are validated

- Authorization - Can a user perform an action?
  - Using the user’s identity, Spring Security determines if they are authorized to perform action

#### Authentication Providers

- Authentication Providers - Verify users identities
  -  Authentication Providers supported by Spring Security:
  -  In Memory
  -  JDBC / Database
  -  Custom
  - LDAP / Active Directory
  - Keycloak
  - ACL (Access Control List)
  - OpenID
  - CAS

#### Password Storage

- NoOp Password Encoder - plain text, not recommended - for legacy systems
- BCrypt - uses bcrypt password hashing
- Argon2 - Uses Argon2 algorithm
- Pbkdf2 - Uses PBKDF2 algorithm
- SCrypt - Uses scrypt algorithm
- Custom - Roll your own? Not recommended!

#### Spring Security Modules

- Core - Core modules of Spring Security
- Remoting - Only needed for support of RMI operations
- Web - Support of web applications
- Config - Provides support for XML and Java configuration
- LDAP - for integration with LDAP identity providers
- OAuth 2.0 Core - Core of OAuth 2.0 Authorization and OpenID
- OAuth 2.0 Client - Client support for OAuth 2.0 and OpenID clients
- OAuth 2.0 JOSE - Provides support for JOSE (Javascript Object Signing and Encryption)
- OAuth 2.0 Resource Server - Support for OAuth 2.0 Resource Servers
- ACL - Support for Access Control Lists
- CAS - Support for Central Authentication Service
- OpenID - Authenticate users with external OpenID server
- Test - Testing Support for Spring Security

### Common Web Vulnerabilities

- [OWASP Top Ten](https://owasp.org/www-project-top-ten/)

1. Injection - Injection of malicious code, such as SQL Injection attacks
   - Mitigation typically using proper encoding and bind variables

2. Broken Authentication - Authentication and session management implemented incorrectly
   - Mitigation - Use framework, don’t roll your own

3. Sensitive Data Exposure - Not protecting sensitive data
   - Mitigation - Proper error handling, don’t expose stack traces

4. XML External Entities- Poorly Configured XML Processors
   - Mitigation - Patch XML Processors frequently

5. Broken Access Control - User Restrictions not properly enforced
   - Mitigation - Automated Testing, verify restrictions

6. Security Misconfiguration - Unintentionally not protecting resources
   - Mitigation - Security Audits

7. CrossSite Scripting - XSS Allows Users to inject HTML or Javascript
   - Mitigation - Use proper validation and escaping

8. Insecure Deserialization - Insecure deserialization can allow remote code execution
   - Mitigation - Use open source, patch frequently

9. Using Components with Known Vulnerabilities - Popular components often have known vulnerabilities
   - Mitigation - Patch frequently

10. Insufficient Logging & Monitoring - Time to detect breaches often over 200 days
    - Mitigation - Properly monitor systems

### Cross-site Scripting

- [Cross Site Scripting Prevention](https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html)

- [Content Security Policy](https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html)

### Cross-Site Request Forgery - CSRF

- Authenticated user is redirected to the attaker's so he can stole credentials and use it to  request a real site 

- To protect from this attact String provides CRSF Token.

- The Synchronizer Token Pattern requires in addition to the session cookie, a secure random CSRF
  token must be in request

- CRSF Token must be part of HTTP Request not automatically sent by browser

  - Do not store CRSF token in cookies

  - Use:
    - HTTP Headers
    - Hidden Form Fields

- The SameSite cookie attribute can be set to tell browser to not send cookie when request is
  coming from other sites
-  SameSite cookie attribute is supported on all modern browsers, older browsers might not
  support
- Supports - None, Lax (~subdomain), Strict
- Modern browsers transitioning from None to Lax if not explicitly set.
- Should not solely rely on SameSite attribute for CSRF prevention

## HTTP Basic Auth
jakie plany weekendowe?
- Two way to sumbit:
  - URL Encoding - https://username:password@www.example.com
  - HTTP Header - Key: Authorization, Value: Basic \<Base64 encoded string>
    - String - username:password

- Flaws
  - URL Encoding and Header Encoding are not secure
    - Trivial task to revert Base64 encoded string back to text value
  - To protect user credentials, use of HTTPS is recommended
  - HTTP Basic Authentication also criticized for sending user credentials in every request
    - Increases risk of compromise
    - Other methods send an authentication token in each request

- Spring by auto-configure HTTP Basic Authentication
  - Default User - user
    -  Set Property spring.security.user.name to override
  - Default Password - Random UUID, check console output
    - Set Property spring.security.user.password to override
  - All paths secured - except actuator info and health

##### Customizing user name and password

- application.properties

```properties
spring.security.user.name=spring
spring.security.user.password=guru
```

##### Integration test

```java
@WebMvcTest
public class BeerControllerIT {
    @Autowired
    WebApplicationContext wac;

    MockMvc mockMvc;

    @MockBean
    BeerRepository beerRepository;

    @MockBean
    BeerInventoryRepository beerInventoryRepository;

    @MockBean
    BreweryService breweryService;

    @MockBean
    CustomerRepository customerRepository;

    @MockBean
    BeerService beerService;

    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders
                .webAppContextSetup(wac)
                .apply(springSecurity())
                .build();
    }

    @WithMockUser("spring")
    @Test
    void findBeers() throws Exception{
        mockMvc.perform(get("/beers/find"))
                .andExpect(status().isOk())
                .andExpect(view().name("beers/findBeers"))
                .andExpect(model().attributeExists("beer"));
    }
}

```

##### Testing HTTP Basic Auth

- BeerControllerIT.java

```java
    @Test
    void findBeersWithHttpBasic() throws Exception{
        mockMvc.perform(get("/beers/find").with(httpBasic("foo","bar")))
                .andExpect(status().isOk())
                .andExpect(view().name("beers/findBeers"))
                .andExpect(model().attributeExists("beer"));
    }
```

##### String Security Filter Chain

- https://spring.io/projects/spring-security#learn
- https://docs.spring.io/spring-security/site/docs/5.3.10.RELEASE/reference/html5/#servlet-security-filters

## Spring Security Java Configuration

Permit All with URL Pattern Matching

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests(authorize -> {
                    authorize.antMatchers("/", "/webjars/**", "/login", "/resources/**","/beers/find", "/beers*" ).permitAll();
                })
                .authorizeRequests()
                .anyRequest()
                .authenticated()
                .and()
                .formLogin().and()
                .httpBasic();
    }
}
```

##### Http Method Matching

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests(authorize -> {
                    authorize.antMatchers("/", "/webjars/**", "/login", "/resources/**").permitAll()
                            .antMatchers("/beers/find", "/beers*").permitAll()
                            .antMatchers(HttpMethod.GET, "/api/v1/beer/**").permitAll();
                })
                .authorizeRequests()
                .anyRequest()
                .authenticated()
                .and()
                .formLogin().and()
                .httpBasic();
    }
}
```

##### Spring MVC Path Matchers

```java
   @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests(authorize -> {
                    authorize.antMatchers("/", "/webjars/**", "/login", "/resources/**").permitAll()
                            .antMatchers("/beers/find", "/beers*").permitAll()
                            .antMatchers(HttpMethod.GET, "/api/v1/beer/**").permitAll()
                            .mvcMatchers(HttpMethod.GET, "/api/v1/beerUpc/{upc}").permitAll();
                })
                .authorizeRequests()
                .anyRequest()
                .authenticated()
                .and()
                .formLogin().and()
                .httpBasic();
    }
```

#### In Memory Authentication Provider

##### Spring Security Authentication Components

- Authentication Filter - A filter for a specific Authentication type in the Spring Security filter
  chain. (ie basic auth, remember me cookie, etc)
- Authentication Manager - Standard API interface used by filter
- Authentication Provider - The implementation of Authentication - (in memory, database, etc)
- User Details Service - Service to provide information about user
- Password Encoder - Service to encrypt and verify passwords
- Security Context - Holds details about authenticated entity

##### User Details Service

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

@Override
    @Bean
    protected UserDetailsService userDetailsService() {
        UserDetails admin = User.withDefaultPasswordEncoder()
                .username("spring")
                .password("guru")
                .roles("ADMIN")
                .build();

        UserDetails user = User.withDefaultPasswordEncoder()
                .username("user")
                .password("password")
                .roles("USER")
                .build();

        return new InMemoryUserDetailsManager(admin,user);
    }
}    
```

##### In Memory Authentication Fluent API

```java
  @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
       auth.inMemoryAuthentication()
               .withUser("spring")
               .password("{noop}guru") // noop - password encoder (no encoding)
               .roles("ADMIN")
               .and()
               .withUser("user")
               .password("{noop}guru")
               .roles("USER");
    }
```

#### Password Security

##### Password Encoding

- Password Hash
  - A hash is a one-way mathematical algorithm applied to the password
    - One way meaning the hash value can be generated from a password
    - But the password cannot be generated from the hash value

- Password Salt
  - A salt is additional data added to the value being hashed
  - Example of password with salt: password1{ThisIsMyReallyLongPasswordSaltValue}
    - Modern algorithms use random salt values

- Delegating Password Encoder
  - Spring Security 5 introduced a delegating password encoder
  - Allows storage of password hashes in multiple formats
  - Password hashes stored as - {encodername}<somepasswordhashvalue>
  - Thus allows you to support multiple hash algorithms while migrating

- Password Encoder Recommendation
  - The Spring Security team recommends using an adaptive one way encoding function such as:
    - BCrypt (Default)
    - Pbkdf2
    - SCrypt

##### LDAP Password Encoder

```java
    @Bean
    PasswordEncoder passwordEncoder(){
        return new LdapShaPasswordEncoder();
    }
```

##### SHA-256 LDAP Password Encoder

```java
   @Bean
    PasswordEncoder passwordEncoder(){
        return new StandardPasswordEncoder();
    }
```

##### BCrypt Password Encoder

```java
 @Bean
    PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }
```

##### Delegating Password Encoder

```java
 @Bean
    PasswordEncoder passwordEncoder(){
        return PasswordEncoderFactories.createDelegatingPasswordEncoder();
    }
```

```java
  @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.inMemoryAuthentication()
                .withUser("spring")
                .password("{bcrypt}$2a$10$DMeky14ZiYx25kBPDlSi2eQRQ4KSWdTYqcyLOk/oiwvZLQ06H/diS")
                .roles("ADMIN")
                .and()
                .withUser("user")
                .password("{sha256}5b0b6414f3c80385662fb67a276bbb5971a381b693745973e6afe3e5ee076ec0daa2bc3562771c7e")
                .roles("USER");

        auth.inMemoryAuthentication().withUser("scott").password("{ldap}{SSHA}wxajkfpXZ+3oUyHJ4NvUZ8tXAkW7licc2VRe+w==").roles("CUSTOMER");
    }
```

##### Custom Delegating Password Encoder

```java
public class SfgPasswordEncoderFactories {

    public static PasswordEncoder createDelegatingPasswordEncoder() {
        String encodingId = "bcrypt";
        Map<String, PasswordEncoder> encoders = new HashMap();
        encoders.put(encodingId, new BCryptPasswordEncoder());
        encoders.put("ldap", new LdapShaPasswordEncoder());
        encoders.put("noop", NoOpPasswordEncoder.getInstance());
        encoders.put("sha256", new StandardPasswordEncoder());
        return new DelegatingPasswordEncoder(encodingId, encoders);
    }

    private SfgPasswordEncoderFactories() {
    }
}
```



```java
@Bean
PasswordEncoder passwordEncoder(){
        return SfgPasswordEncoderFactories.createDelegatingPasswordEncoder();
}
```

#### Custom Authentication Filter 

- RestHeaderAuthFilter

```java
@Slf4j
public class RestHeaderAuthFilter extends AbstractRestAuthFilter {

    public RestHeaderAuthFilter(RequestMatcher requiresAuthenticationRequestMatcher) {
        super(requiresAuthenticationRequestMatcher);
    }

    protected String getPassword(HttpServletRequest request) {
        return request.getHeader("Api-Secret");
    }

    protected String getUsername(HttpServletRequest request) {
        return request.getHeader("Api-Key");
    }
}
@Slf4j
public abstract  class AbstractRestAuthFilter extends AbstractAuthenticationProcessingFilter {

    public AbstractRestAuthFilter(RequestMatcher requiresAuthenticationRequestMatcher) {
        super(requiresAuthenticationRequestMatcher);
    }

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
            throws IOException, ServletException {

        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;


        if (logger.isDebugEnabled()) {
            logger.debug("Request is to process authentication");
        }

        try {
            Authentication authResult = attemptAuthentication(request, response);

            if (authResult != null) {
                successfulAuthentication(request, response, chain, authResult);
            } else {
                chain.doFilter(request, response);
            }
        } catch (AuthenticationException e) {
            log.error("Authentication Failed", e);
            unsuccessfulAuthentication(request, response, e);
        }
    }

    @Override
    protected void unsuccessfulAuthentication(HttpServletRequest request,
                                              HttpServletResponse response, AuthenticationException failed)
            throws IOException, ServletException {

        SecurityContextHolder.clearContext();

        if (log.isDebugEnabled()) {
            log.debug("Authentication request failed: " + failed.toString(), failed);
            log.debug("Updated SecurityContextHolder to contain null Authentication");
        }

        response.sendError(HttpStatus.UNAUTHORIZED.value(),
                HttpStatus.UNAUTHORIZED.getReasonPhrase());
    }

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException, ServletException {
        String userName = getUsername(request);
        String password = getPassword(request);

        if (userName == null) {
            userName = "";
        }

        if (password == null) {
            password = "";
        }

        log.debug("Authenticating User: " + userName);

        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(userName, password);

        if (!StringUtils.isEmpty(userName)) {
            return this.getAuthenticationManager().authenticate(token);
        } else {
            return null;
        }
    }

    @Override
    protected void successfulAuthentication(HttpServletRequest request,
                                            HttpServletResponse response, FilterChain chain, Authentication authResult)
            throws IOException, ServletException {

        if (logger.isDebugEnabled()) {
            logger.debug("Authentication success. Updating SecurityContextHolder to contain: "
                    + authResult);
        }

        SecurityContextHolder.getContext().setAuthentication(authResult);

    }

    protected abstract String getPassword(HttpServletRequest request);

    protected abstract String getUsername(HttpServletRequest request);
}
```

- SecurityConfig

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {

public RestHeaderAuthFilter restHeaderAuthFilter(AuthenticationManager authenticationManager){
        RestHeaderAuthFilter filter = new RestHeaderAuthFilter(new AntPathRequestMatcher("/api/**"));
        filter.setAuthenticationManager(authenticationManager);
        return filter;
    }
    
    
 @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.addFilterBefore(restHeaderAuthFilter(authenticationManager()),
                UsernamePasswordAuthenticationFilter.class)
        .csrf().disable();

        http.addFilterBefore(restUrlAuthFilter(authenticationManager()),
                UsernamePasswordAuthenticationFilter.class);

        http
                .authorizeRequests(authorize -> {
                    authorize.antMatchers("/", "/webjars/**", "/login", "/resources/**").permitAll()
                            .antMatchers("/beers/find", "/beers*").permitAll()
                            .antMatchers(HttpMethod.GET, "/api/v1/beer/**").permitAll()
                            .mvcMatchers(HttpMethod.GET, "/api/v1/beerUpc/{upc}").permitAll();
                })
                .authorizeRequests()
                .anyRequest()
                .authenticated()
                .and()
                .formLogin().and()
                .httpBasic();
    }   
```

#### Database Authentication

- You will need to provide  an alternate User Details Service 
- Spring Security provides the interface, you provide the implementation 
- Can be in-memory (as we’ve been using), JDBC, NoSQL, external service, etc 
- Spring Security does provide a JDBC implementation with database schemas 
- Provide custom Database Authentication using Spring Data JPA 
- Need User and Authority JPA Entities 
- Spring Data JPA Repositories
- Configure Spring Security to use custom implementation of User Details Service

##### JPA Entities

- `org.springframework.security.core.userdetails.User`

#### User Roles

##### Authorization in Spring Security

- Authorization is the approval to perform an action within the application 
- Authorization can be as simple as allow all or is authenticated 
- Specific actions can be limited to specific roles or authorities  
- By default, Spring Security roles start with “ROLE_”  
  - Example: ROLE_ADMIN  

- Spring Security authorities may be any string value 

###### Roles vs Authorities 

- Typically a role is considered a group of one or more authorities 

- In a Spring Security context: 
  - Roles by default start with “ROLE_” 
    - Configuration uses methods of hasRole() or hasAnyRole() - requires prefix 

- Authorities are any string 
  - Configuration uses methods of hasAuthority() or hasAnyAuthority()



###### Access Decision Voters

- Access Decision Voters provide a vote on allowing access 

  - ACCESS_ABSTAIN - Voter has no opinion 

  - ACCESS_DENIED - Voter does not approve 

  - ACCESS_GRANTED = Voter approves access 

###### Role Voter

- Most commonly used voter in Spring Security 
- Uses role names to grant access 
- If Authenticated user has role, access is granted 
  - If no authorities begin with prefix of ROLE_ this voter will abstain

###### Authenticated Voter

- Grants Access based on level of authentication
  - Anonymously - Not Authenticated 
  - Remembered - Authenticated via Remember me cookie 
  - Fully - Fully Authenticated

###### Consensus Voter

- Accepts list of Access Decision voters 
- Polls each voter 
- Access granted based on total of allowed vs denied responses

###### Role Hierarchy Voter

- Allows configuration of Role Hierarchies 

- Example: 

  - ROLE_USER 

  - ROLE_ADMIN > ROLE_USER > ROLE_FOO 

- ROLE_ADMIN will have all of its authorities, and those of ROLE_USER and ROLE_FOO

###### Security Expressions

- permitAll - Allows all access 
- denyAll - Denies all access 
- isAnonymous - Is Authenticated Anonymously 
- isAuthenticated - Is Authenticated (Fully or Remembered) 
- isRememberMe - Is Authenticated with Remember Me Cookie 
- isFullyAuthenticated - Is Fully Authenticated 

- hasRole - Has authority with ROLE_*** 
- _hasAnyRole - Accepts list of ROLE_*** strings 
- hasAuthority - Has authority string value 
- hasAnyAuthority - Accepts list of string authority values 
- hasIpAddress - accepts IP Address or IP/Netmask 

###### Http Filter Security Interceptor

- Securing specific URLs is done using Spring Security Filters 
- Filters use configured voters to determine authorization 
- Security expressions available for use in Java configuration of HttpSecurity

###### Method Security

- Spring Security also has method level security 
- Enable using @EnableGlobalMethodSecurity configuration annotation 
- @Secured - accepts list of roles, or IS_AUTHENTICATED_ANONYMOUSLY 
- @PreAuthorize - accepts security expressions 
- Under covers Spring Security is using AOP to intercept and use the AccessDecisionManager 
  - Same technique as Filter
